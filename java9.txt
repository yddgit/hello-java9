Java 9

- modularity
- jshell
- http2
- ...


1.下载Java 9: http://jdk.java.net/9/

2.安装

3.验证:
  java -version
  javac -version

4.避免和其他版本jdk冲突
  使用如下命令在当前命令窗口临时改变PATH环境变量
  set path=X:\java\9\install\path\bin;%PATH%

5.jshell是jdk9提供的一个运行java语言的shell环境
  将java变成了脚本语言

  /help 获取命令帮助

  示例:

  jshell> 2+3
  $1 ==> 5

  jshell> int i = $1
  i ==> 5

  jshell> i++
  $3 ==> 5

  jshell> i
  i ==> 6

  jshell> i++ + ++i
  $5 ==> 14

6.创建一个module --> modularity vs osgi
  - 创建src目录
  - 设计模块名称yddutil
  - 建立模块目录src/yddutil
  - 在src/yddutil目录下建立module-info.java
    示例: 模块yddutil只对外开放ydd包下的类
    module yddutil {
      exports ydd;
    }
  - 编译: javac --module-source-path src -d out src\yddutil\ydd\*.java src\yddutil\module-info.java
    此时yddutil这个模块就编译完成了
  - 运行: java --module-path out -m yddutil/ydd.Main

7.创建第二个依赖module

  module vs jar
  - 声明式依赖
    requires moduleA
    maven dependency
  - 选择性封装与暴露
  - best practice
    公布接口(exports接口), 隐藏实现
  - jar包无论用不用都得把类暴露出来

  src/ydd.test/module-info.java
  module ydd.test {
    requires yddutil;
  }

  src/ydd.test/ydd/test/Test.java

  编译: javac --module-source-path src -d out src\yddutil\ydd\*.java src\yddutil\module-info.java src\ydd.test\ydd\test\*.java src\ydd.test\module-info.java
  运行: java --module-path out -m ydd.test/ydd.test.Test

8.隐藏第一个module中不对外的接口

  在模块yddutil中添加一个类internal/Internal.java
  package internal;
  public class Internal {
    public void m() {
      System.out.println("Method Internal.m() invoked!");
    }
  }
  在模块ydd.test中ydd/test/Test.java中引入: import internal.Internal;
  编译: javac --module-source-path src -d out src\yddutil\ydd\*.java src\yddutil\internal\*.java src\yddutil\module-info.java src\ydd.test\ydd\test\*.java src\ydd.test\module-info.java
  此时会出现如下报错:

  src\ydd.test\ydd\test\Test.java:4: 错误: 程序包 internal 不可见
  import internal.Internal;
         ^
    (程序包 internal 已在模块 yddutil 中声明, 但该模块未导出它)
  1 个错误

  因此, 尝试引入一个模块中未公开的类, 编译就会报错

9.其他模块化设计思想的应用: COM+/WebService/OSGI

10.Java9模块化编程中的概念:
  service: 一个模块对外公开的interface
  service implementation: 以上公开的interface的实现


